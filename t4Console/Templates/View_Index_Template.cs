// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace t4Console.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using t4Console.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class View_Index_Template : View_Index_TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("@model ");
            
            #line 7 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(page.PageIdentifier));
            
            #line default
            #line hidden
            this.Write("Model\r\n@{\r\n    ViewData[\"Title\"] = \"");
            
            #line 9 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write("\";\r\n}\r\n\r\n<div class=\"container\">\r\n\t<div class=\"col-md-8 order-md-1\">\r\n\t\t<h4 class" +
                    "=\"mb-3\">\r\n\t\t\t");
            
            #line 15 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(page.PageTitle));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t</h4>\r\n\t\t<hr class=\"my-4\">\r\n\t\t<form class=\"needs-validation\" method=\"post\" as" +
                    "p-action=\"Details\">\r\n\t\t\t<div class=\"row mb-3 \">\r\n");
            
            #line 20 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"

	int count = 0;
	foreach(var field in fields)
	{
		if(field.FieldType == "select")
		{

            
            #line default
            #line hidden
            this.Write("\t\t\t\t<div class=\"col-sm-4 themed-grid-col mb-3\">\r\n\t\t\t\t\t<label asp-for=\"");
            
            #line 28 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 28 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.DisplayName));
            
            #line default
            #line hidden
            this.Write("</label>\r\n\t\t\t\t\t<select asp-for=\"");
            
            #line 29 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName));
            
            #line default
            #line hidden
            this.Write("\" class=\"form-select\" required>\r\n\t\t\t\t\t\t<option value=\"\">Choose...</option>\r\n");
            
            #line 31 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"

			var options = domainValues.Where(dv => dv.FieldId == field.FieldId).OrderBy(f=>f.DomainSeq).ToList();
			foreach(var option in options)
			{

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t<option value=\"");
            
            #line 36 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(option.DomainName));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 36 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(option.AttributeValue));
            
            #line default
            #line hidden
            this.Write("</option>\r\n\r\n");
            
            #line 38 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"

			}

            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\t\t\t\t</select>\r\n\t\t\t\t</div>\r\n");
            
            #line 44 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"

		}
		else if(field.FieldType == "checkbox")
		{

            
            #line default
            #line hidden
            this.Write("\t\t\t\t<div class=\"col-sm-4 themed-grid-col mb-3\">\r\n\t\t\t\t\t<input  asp-for=\"");
            
            #line 50 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName));
            
            #line default
            #line hidden
            this.Write("\" type=\"checkbox\" class=\"form-check-input\" id=\"");
            
            #line 50 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName));
            
            #line default
            #line hidden
            this.Write("\">\r\n\t\t\t\t\t<label  asp-for=\"");
            
            #line 51 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName));
            
            #line default
            #line hidden
            this.Write("\" class=\"form-check-label\" for=\"");
            
            #line 51 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 51 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.DisplayName));
            
            #line default
            #line hidden
            this.Write("</label>\r\n\t\t\t\t</div>\r\n\t\t\t\r\n");
            
            #line 54 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"

		}
		else if(field.FieldType == "checklist")
		{

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\r\n");
            
            #line 60 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"

			var options = domainValues.Where(dv => dv.FieldId == field.FieldId).OrderBy(f=>f.DomainSeq).ToList();
			foreach(var option in options)
			{

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\r\n\t\t\t\t<div class=\"col-sm-4 themed-grid-col mb-3\">\r\n\t\t\t\t\t<input  asp-for=\"");
            
            #line 66 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName));
            
            #line default
            #line hidden
            this.Write("\" type=\"checkbox\" class=\"form-check-input\" id=\"");
            
            #line 66 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(option.DomainName));
            
            #line default
            #line hidden
            this.Write("\">\r\n\t\t\t\t\t<label  asp-for=\"");
            
            #line 67 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName));
            
            #line default
            #line hidden
            this.Write("\" class=\"form-check-label\" for=\"");
            
            #line 67 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(option.DomainName));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 67 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(option.AttributeValue));
            
            #line default
            #line hidden
            this.Write("</label>\r\n\t\t\t\t</div>\r\n");
            
            #line 69 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"

			}
		}
		else
		{
			string inputType = "";
			switch(field.FieldType)
			{
				case "nvarchar":
								inputType = "text";
								break;
				case "datetime":
								inputType = "date";
								break;
				case "decimal":
								inputType = "number";
								break;
				case "integer":
								inputType = "number";
								break;
				default:
					break;
			}

            
            #line default
            #line hidden
            this.Write("\t\t\t\t<div class=\"col-sm-4 themed-grid-col\">\r\n\t\t\t\t\t<label  asp-for=\"");
            
            #line 94 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 94 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.DisplayName));
            
            #line default
            #line hidden
            this.Write("</label>\r\n\t\t\t\t\t<input  asp-for=\"");
            
            #line 95 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName));
            
            #line default
            #line hidden
            this.Write("\" type=\"");
            
            #line 95 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(inputType));
            
            #line default
            #line hidden
            this.Write("\" class=\"form-control text-center\" id=\"");
            
            #line 95 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldName));
            
            #line default
            #line hidden
            this.Write("\" placeholder=\"\" required>\r\n\t\t\t\t\t<div class=\"invalid-feedback\">\r\n\t\t\t\t\t\tValid ");
            
            #line 97 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.DisplayName));
            
            #line default
            #line hidden
            this.Write(" is required.\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n");
            
            #line 100 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"

		}
	}

            
            #line default
            #line hidden
            this.Write("\t\t\t</div>\r\n");
            
            #line 105 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"

	if(page.PageIdentifier != "Home")
	{

            
            #line default
            #line hidden
            this.Write("\t\t\t<div class=\"row mb-3 \">\r\n");
            
            #line 110 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"

		if(PreviousPage !=null){
		

            
            #line default
            #line hidden
            this.Write("\t\t\t\t<div class=\"col-sm-2 themed-grid-col mb-3\">\r\n\t\t\t\t\t<button asp-controller = \"");
            
            #line 115 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PreviousPage.PageIdentifier));
            
            #line default
            #line hidden
            this.Write("\" asp-action= \"Index\" class=\"btn btn-primary\">Previous</button>\r\n\t\t\t\t</div>\r\n\r\n");
            
            #line 118 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"

		}

            
            #line default
            #line hidden
            this.Write("\t\t\t\t<div class=\"col-sm-2 themed-grid-col mb-3\">\r\n\t\t\t\t\t<button   type=\"submit\" cla" +
                    "ss=\"btn btn-primary\">Save</button>\r\n\t\t\t\t</div>\r\n");
            
            #line 124 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"

		if(NextPage !=null)
		 {

            
            #line default
            #line hidden
            this.Write("\t\t\t\t<div class=\"col-sm-2 themed-grid-col mb-3\">\r\n\t\t\t\t\t<button asp-controller = \"");
            
            #line 129 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NextPage.PageIdentifier));
            
            #line default
            #line hidden
            this.Write("\" asp-action= \"Index\"  type=\"submit\" class=\"btn btn-primary\">Next</button>\r\n\t\t\t\t<" +
                    "/div>\r\n");
            
            #line 131 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
		
		}

            
            #line default
            #line hidden
            this.Write("\t\t\t</div>\r\n");
            
            #line 135 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"


	}

            
            #line default
            #line hidden
            this.Write("\t\t</form>\r\n\t</div>\r\n</div>\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 142 "D:\Codegen\t4Console\t4Console\Templates\View_Index_Template.tt"
 
	public string Name { get; set;}
	public string ProjectName {get; set ;}
	public Page page {get; set;}
    public List<Field> fields {get; set;}
    public List<Domain> domainValues {get; set;}
	public Page? NextPage {get; set;}
	public Page? PreviousPage {get; set;}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class View_Index_TemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
